import{_ as t,I as r,c as a,o as s,j as l,J as e,a as u,w as o}from"./chunks/framework.fGi7qB65.js";const T=JSON.parse('{"title":"web 安全","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/browser/webSecurity.md","filePath":"knowledge/browser/webSecurity.md"}'),p={name:"knowledge/browser/webSecurity.md"};function S(d,n,f,k,P,b){const i=r("Collapse");return s(),a("div",null,[n[8]||(n[8]=l("h1",{id:"web-安全",tabindex:"-1"},[u("web 安全 "),l("a",{class:"header-anchor",href:"#web-安全","aria-label":"Permalink to “web 安全”"},"​")],-1)),n[9]||(n[9]=l("h2",{id:"_1-xss",tabindex:"-1"},[u("1.xss "),l("a",{class:"header-anchor",href:"#_1-xss","aria-label":"Permalink to “1.xss”"},"​")],-1)),e(i,null,{default:o(()=>[...n[0]||(n[0]=[l("ul",null,[l("li",null,"XSS: 攻击者往网页里注入恶意脚本（通常是 JavaScript），当用户访问时这些脚本被执行，从而窃取数据、劫持会话或执行恶意操作.主要利用 前端页面缺乏输入/输出校验，把恶意代码“混”进正常页面。")],-1),l("p",null,"XSS 的三种常见类型:",-1),l("table",{tabindex:"0"},[l("thead",null,[l("tr",null,[l("th",null,"类型"),l("th",null,"说明"),l("th",null,"举例")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("strong",null,"1. 反射型 XSS（Reflected XSS）")]),l("td",null,"恶意代码直接拼接在 URL 中，通过点击链接触发。常见于搜索结果页、错误提示页。"),l("td",null,[l("code",null,"https://example.com?q=<script>alert(1)<\/script>")])]),l("tr",null,[l("td",null,[l("strong",null,"2. 存储型 XSS（Stored XSS）")]),l("td",null,"攻击代码被存储到数据库或文件中，用户访问页面时，恶意代码被从服务器取出并执行。"),l("td",null,[u("在留言板输入 "),l("code",null,"<script>alert('XSS')<\/script>")])]),l("tr",null,[l("td",null,[l("strong",null,"3. DOM 型 XSS（DOM-based XSS）")]),l("td",null,"攻击代码在前端 JavaScript 中被动态插入页面(前端代码直接把 URL 或输入插入到 DOM，导致执行恶意脚本。)"),l("td",null,[u("前端执行 "),l("code",null,"innerHTML = location.hash"),u(" 导致脚本注入")])])])],-1),l("p",null,"XSS 能干什么: 窃取 Cookie / LocalStorage / Token;劫持用户会话（伪造请求、冒充身份）;插入钓鱼页面，引导用户输入敏感信息;挂马（加载恶意脚本，挖矿、键盘监听）;DDoS（利用浏览器不断发请求）",-1),l("ul",null,[l("li",null,[u("防御: "),l("ul",null,[l("li",null,"输入过滤 & 输出转义(对用户输入进行 HTML 转义);"),l("li",null,[u("使用安全 API; "),l("ul",null,[l("li",null,"使用 textContent / value / setAttribute（安全的 API）替代 innerHTML。")])]),l("li",null,"CSP（内容安全策略）;"),l("li",null,"HTTP 头 Content-Security-Policy 限制页面能执行的脚本来源。"),l("li",null,"HttpOnly Cookie"),l("li",null,"当必须允许用户提交 HTML（富文本编辑器）时，不要自己写正则，使用成熟库：DOMPurify（OWASP 推荐）。配置白名单和去除事件处理器（on*）、script、style、iframe 等潜在危险元素"),l("li",null,"永远不要把 location.hash / location.search 等“未经验证”的值直接 innerHTML 或 eval。"),l("li",null,"使用 DOMPurify 对插入的 HTML 做消毒。")])])],-1),l("p",null,[l("strong",null,"XSS 本质是“用户端执行了攻击者注入的脚本”。防御核心是：不信任输入 → 严格验证 → 安全输出，再辅以 CSP 和安全 cookie 设置。")],-1)])]),_:1}),n[10]||(n[10]=l("h2",{id:"_2-csrf",tabindex:"-1"},[u("2.csrf "),l("a",{class:"header-anchor",href:"#_2-csrf","aria-label":"Permalink to “2.csrf”"},"​")],-1)),e(i,null,{default:o(()=>[...n[1]||(n[1]=[l("p",null,"攻击者诱导用户在已登录的站点上发起非本意请求，从而在用户的身份权限下执行操作。",-1),l("ul",null,[l("li",null,[l("ol",null,[l("li",null,"用户已登录目标网站，并有有效 cookie 或认证信息。")])]),l("li",null,[l("ol",{start:"2"},[l("li",null,"用户在其他站点点击恶意链接或加载攻击页面。")])]),l("li",null,[l("ol",{start:"3"},[l("li",null,"浏览器会自动携带 cookie，目标网站无法区分请求是否本意。")])])],-1),l("p",null,"典型攻击场景:",-1),l("ul",null,[l("li",null,"用户登录银行网站，保留 session cookie。"),l("li",null,[u("攻击者在另一个网站放了一个表单或 "),l("code",null,"<img> / <script>"),u(" 请求到银行的转账接口（POST/GET）。")]),l("li",null,"用户在登录状态下访问攻击者页面，浏览器自动携带银行 cookie，银行服务器执行了转账请求。")],-1),l("p",null,"防御手段:",-1),l("ul",null,[l("li",null,[l("p",null,"CSRF Token（同步/双向校验）—— 最常用且安全"),l("ul",null,[l("li",null,"服务端为用户会话生成一个随机 token（例如放在 session 中），页面表单或 AJAX 请求必须提交该 token，服务端验证 token 与 session 中的一致性。")])]),l("li",null,[l("p",null,"SameSite Cookie"),l("ul",null,[l("li",null,"set-Cookie: session=...; SameSite=Strict 或 SameSite=Lax（或 None; Secure 当跨站时）。"),l("li",null,"Strict 最严格（跨站导航也不会携带），Lax 对 GET 跨站顶级导航允许但对多数跨站 POST/iframe 请求不携带 cookie，能防很多自动请求类 CSRF。")])]),l("li",null,[l("p",null,"验证 Origin / Referer Header"),l("ul",null,[l("li",null,"对于改变状态的请求（POST/PUT/DELETE），服务端检查 Origin 或 Referer 是否是受信任域")])]),l("li",null,[l("p",null,"Double Submit Cookie（双提交 Cookie）"),l("ul",null,[l("li",null,"服务端发一个 CSRF token 到 cookie，客户端 JS 将该 token 读取并放到请求头或请求体中；服务端验证 cookie 和请求中 token 是否一致")])]),l("li",null,[l("p",null,"禁止危险 HTTP 方法或只允许 JSON Content-Type; 避免敏感操作用 GET;")]),l("li",null,[l("p",null,"最小权限与敏感操作的二次确认")])],-1),l("p",null,"Cookie 自动携带，容易被 CSRF 利用；Token 需 JS 手动附加 Header，跨站点 JS 无法设置 → 自然防止 CSRF，但要防 XSS 窃取。",-1)])]),_:1}),n[11]||(n[11]=l("h2",{id:"_3-点击劫持",tabindex:"-1"},[u("3.点击劫持 "),l("a",{class:"header-anchor",href:"#_3-点击劫持","aria-label":"Permalink to “3.点击劫持”"},"​")],-1)),e(i,null,{default:o(()=>[...n[2]||(n[2]=[l("p",null,"点击劫持是攻击者把目标站点页面嵌入到一个透明或不可见的 iframe（或覆盖层）里，并在上面放置诱导用户点击的元素（按钮、图片等）。用户以为点击了攻击页面的内容，实际上是在对被嵌入的受信任页面进行操作（例如授权、付款、修改设置等）。 本质是“把用户的点击重定向到受信任页面的 UI 元素”，属于 UI 重定向/社会工程类攻击。",-1),l("p",null,"典型攻击场景: 1.受害者登录到 bank.example.com，保持登录 cookie。",-1),l("p",null,"2.攻击者页面在自己的站点上嵌入 bank.example.com 的转账页面作为透明 iframe，并在其上放置「点我领红包」按钮。",-1),l("p",null,"3.用户点击“红包”，实际触发 iframe 内的“确认转账”按钮 -> 转账成功（浏览器自动带 cookie）。",-1),l("p",null,"防御手段:",-1),l("ul",null,[l("li",null,[l("p",null,"在服务器端设置 HTTP header：Content-Security-Policy: frame-ancestors"),l("ul",null,[l("li",null,[u("只允许来自同源或指定域的页面把本站嵌入 "),l("code",null,"<frame>/<iframe>/<object>")])])]),l("li",null,[l("p",null,"设置 X-Frame-Options"),l("ul",null,[l("li",null,"指定是否被被嵌入")])]),l("li",null,[l("p",null,"对必须被嵌入的页面，严格限制来源并最小化权限")]),l("li",null,[l("p",null,"对敏感操作做“用户意愿”二次确认")]),l("li",null,[l("p",null,"服务器端对关键请求做额外校验")])],-1)])]),_:1}),n[12]||(n[12]=l("h2",{id:"_4-sql注入",tabindex:"-1"},[u("4.sql注入 "),l("a",{class:"header-anchor",href:"#_4-sql注入","aria-label":"Permalink to “4.sql注入”"},"​")],-1)),e(i,null,{default:o(()=>[...n[3]||(n[3]=[l("p",null,[u("SQL 注入 是攻击者把恶意 SQL 片段注入到应用构建的 SQL 查询中，借此改变查询逻辑、窃取/修改/删除数据库数据，甚至取得数据库后台权限。"),l("strong",null,"根本原因通常是把不可信输入直接拼到 SQL 字符串里执行。")],-1),l("p",null,"防御原则:",-1),l("ul",null,[l("li",null,"参数化查询 / 预处理语句（Prepared Statements） — 首选。"),l("li",null,"最小权限数据库账户"),l("li",null,"严格输入校验和白名单"),l("li",null,"避免基于字符串拼接构建 SQL")],-1)])]),_:1}),n[13]||(n[13]=l("h2",{id:"_5-ddos",tabindex:"-1"},[u("5.ddos "),l("a",{class:"header-anchor",href:"#_5-ddos","aria-label":"Permalink to “5.ddos”"},"​")],-1)),e(i,null,{default:o(()=>[...n[4]||(n[4]=[l("p",null,[l("strong",null,"DDoS 是攻击者用大量分布式流量或资源请求耗尽目标的带宽、CPU、连接数或应用资源，导致服务不可用。"),u(" 攻击类型常见：流量耗尽（Volumetric，如 UDP 放大）、协议耗尽（SYN flood、TCP state exhaustion）、应用层耗尽（HTTP request floods、slowloris、expensive endpoints）。")],-1),l("p",null,"目标——防护要解决的三件事",-1),l("ul",null,[l("li",null,"快速检测（尽早发现）"),l("li",null,"自动缓解（在边缘/网络层拦截恶意流量）"),l("li",null,"稳定服务可用性（退化而不是崩溃，优先保证关键路径）")],-1),l("p",null,"全栈防护策略:",-1),l("ul",null,[l("li",null,[u("边缘 + CDN / DDoS 护盾 "),l("ul",null,[l("li",null,"使用Cloudflare 等")])]),l("li",null,"网络层与骨干"),l("li",null,"负载均衡 + 弹性扩缩"),l("li",null,"WAF / 应用层规则"),l("li",null,"速率限制与连接控制（应用与TCP层）"),l("li",null,"黑白名单与地理/ASN 过滤"),l("li",null,"检测与监控"),l("li",null,"运维与应急流程")],-1)])]),_:1}),n[14]||(n[14]=l("h2",{id:"_6-爬虫",tabindex:"-1"},[u("6. 爬虫 "),l("a",{class:"header-anchor",href:"#_6-爬虫","aria-label":"Permalink to “6. 爬虫”"},"​")],-1)),e(i,null,{default:o(()=>[...n[5]||(n[5]=[l("ul",null,[l("li",null,[l("p",null,[u("良性爬虫：搜索引擎（Googlebot、Bingbot）、站点监控、归档服务（Wayback）等。通常遵守 "),l("strong",null,"robots.txt"),u("、标识自己 User‑Agent。")])]),l("li",null,[l("p",null,"恶意 / 滥用爬虫：数据抓取（剽窃内容/价格/邮件）、刷流量、库存抢购、账号暴力破解、指纹探测、内容镜像等。常规目标：高并发、绕过付费或规则、占用资源。")])],-1),l("p",null,"检测爬虫:",-1),l("ul",null,[l("li",null,"请求速率异常（短时间大量请求、重复 pattern）。"),l("li",null,"单 IP 或 IP 段极高请求数；高并发连接。"),l("li",null,"不执行 JS（没有执行由 JS 注入的动态 token）、不接受或不返回 cookie。"),l("li",null,"常见或可疑 User-Agent（空 UA / 非主流 UA / 已知爬虫 UA 但伪造）。"),l("li",null,"不加载图片、样式、字体，只请求 HTML/API。"),l("li",null,"请求头异常（缺少常见浏览器头，如 Accept-Language、Sec-* 系列）。"),l("li",null,"相同行为来自大量不同 IP（分布式采集）。"),l("li",null,"执行路径规则：深层分页、批量ID遍历、只访问产品详情而非主页。 这些信号单独可能是误报，组合在一起更有可信度。")],-1),l("p",null,"防御总体策略（分层防护）:",-1),l("ul",null,[l("li",null,[u("边缘与流量过滤 "),l("ul",null,[l("li",null,"CDN / WAF（Cloudflare、Akamai、AWS WAF 等）做第一道防线：IP 黑名单、国家/ASN 屏蔽、速率限制、JS challenge。")])]),l("li",null,"速率限制 & 并发控制"),l("li",null,"身份与访问控制"),l("li",null,"行为分析与指纹"),l("li",null,"人机验证/验证码"),l("li",null,"混淆 HTML / JS"),l("li",null,"法律与条款")],-1),l("p",null,"前端与反爬虫:",-1),l("ul",null,[l("li",null,[l("p",null,"font-face拼凑式"),l("ul",null,[l("li",null,"页面使用了font-face定义了字符集，并通过unicode去映射展示。也就是说，除去图像识别，必须同时爬取字符集，才能识别出数字。")])]),l("li",null,[l("p",null,"background拼凑式"),l("ul",null,[l("li",null,"与font的策略类似。数字其实是图片，根据不同的background偏移，显示出不同的字符。")])]),l("li",null,[l("p",null,"字符穿插式"),l("ul",null,[l("li",null,"文章里，穿插了各种迷之字符，并且通过样式把这些字符隐藏掉。")])]),l("li",null,[l("p",null,"伪元素隐藏式"),l("ul",null,[l("li",null,"把关键的信息，做到了伪元素的content里")])]),l("li",null,[l("p",null,"元素定位覆盖式"),l("ul",null,[l("li",null,"关键信息, 通过不同元素不同的定位不同层的覆盖, 页面上显示正确的样式")])]),l("li",null,[l("p",null,"字符分割式"),l("ul",null,[l("li",null,"真假混合")])]),l("li",null,[l("p",null,"字符集替换式"),l("ul",null,[l("li",null,"重新定义了字符集，html 与实际显示不一致")])]),l("li",null,[l("p",null,"html2canvas")]),l("li",null,[l("p",null,"User-Agent 检测;IP 频率检测;Cookie/Session 验证;JS 验证;Referer 检测;请求行为分析; referen 检查页面: 动态渲染 / JS 加密;Canvas / 图片验证码渲染;混淆 HTML / JS;验证码 / 人机验证;")])],-1)])]),_:1}),n[15]||(n[15]=l("h3",{id:"_7-文件上传漏洞",tabindex:"-1"},[u("7.文件上传漏洞 "),l("a",{class:"header-anchor",href:"#_7-文件上传漏洞","aria-label":"Permalink to “7.文件上传漏洞”"},"​")],-1)),e(i,null,{default:o(()=>[...n[6]||(n[6]=[l("p",null,"文件上传漏洞会导致:",-1),l("ul",null,[l("li",null,"远程代码执行（RCE）：上传可执行脚本（.php/.jsp/.asp/.jspx/.aspx）并触发执行。"),l("li",null,"任意文件覆盖 / 覆盖重要文件：上传的文件覆盖现有文件导致服务异常或后门。"),l("li",null,"敏感数据泄露：上传包含敏感信息或把上传目录暴露到外网。"),l("li",null,"恶意文件分发 / 恶意二进制：传播木马、挖矿程序、恶意图片等给其他用户。"),l("li",null,"存储耗尽 / DoS：大量大文件上传耗尽磁盘或带宽。"),l("li",null,"安全绕过（MIME/扩展绕过）")],-1),l("p",null,"常见攻击向量（列举）:",-1),l("ul",null,[l("li",null,"上传 .php 并通过 /uploads/shell.php 访问 -> RCE。"),l("li",null,"上传 .jpg 文件但实际是 PHP（混淆扩展或双扩展 like shell.jpg.php）并被服务器当作脚本执行。"),l("li",null,"在 filename 中使用 ../ 路径穿越覆盖关键文件（若服务端未规范化路径）。"),l("li",null,"通过大文件或并发上传耗尽磁盘 / 触发资源耗尽。"),l("li",null,"利用上传的 SVG（包含 JS）进行 XSS。"),l("li",null,"上传带有恶意 EXIF 的图片或特殊格式触发后端解析库漏洞。")],-1),l("p",null,"防御原则:",-1),l("ul",null,[l("li",null,"最小信任：客户端输入（文件名、MIME、大小、扩展）均不可信。"),l("li",null,"白名单策略：只允许明确需要的一小部分扩展与 MIME（优于黑名单）。"),l("li",null,"多层检测：扩展名 + MIME 类型 + 文件头/魔数（magic bytes） + 内容扫描（AV/沙箱） + 元数据检查。"),l("li",null,"隔离存储：上传存储在不可执行、非 web 根目录的位置，或使用对象存储（S3）并通过后端签名/代理访问。"),l("li",null,"最小权限与不可执行：上传目录不可执行（noexec），文件系统权限最小化。"),l("li",null,"签名/校验与短期 URL：采用 signed URLs / presigned upload + 后端审核或触发异步扫描。"),l("li",null,"流式处理 + 限制：限制最大文件大小、文件类型、并发上传数、速率。"),l("li",null,"后续处理：异步病毒扫描、图像重编码（重新生成缩略图），移除可执行元数据。"),l("li",null,"日志与告警：所有上传活动审计、异常触发报警。")],-1)])]),_:1}),n[16]||(n[16]=l("h3",{id:"_8-中间人攻击",tabindex:"-1"},[u("8. 中间人攻击 "),l("a",{class:"header-anchor",href:"#_8-中间人攻击","aria-label":"Permalink to “8. 中间人攻击”"},"​")],-1)),e(i,null,{default:o(()=>[...n[7]||(n[7]=[l("p",null,"定义：攻击者在通信双方之间拦截、篡改或监听网络流量，使双方以为是在直接通信，但实际上流量被中间人读取或修改。",-1),l("p",null,"危害：窃取凭证、会话劫持、注入恶意脚本/内容、篡改数据、绕过认证、下发恶意资源等。",-1),l("p",null,"常见的中间人攻击( MITM 变种)",-1),l("ul",null,[l("li",null,"被动监听"),l("li",null,"主动中间人"),l("li",null,"ARP Spoofing / L2 欺骗"),l("li",null,"DNS 欺骗 / 劫持"),l("li",null,"SSL/TLS 中间人（伪造证书 / 不安全降级)"),l("li",null,"恶意代理 / 透明代理 / 企业中间人"),l("li",null,"边缘 CDN / 插件污染")],-1),l("p",null,"防御与缓解措施:",-1),l("ul",null,[l("li",null,"始终使用 HTTPS（TLS）"),l("li",null,"启用 TLS1.3，关闭过时协议/算法"),l("li",null,"HSTS（HTTP Strict Transport Security）"),l("li",null,"启用 HTTP/2 或 HTTP/3（QUIC）"),l("li",null,"Content Security Policy (CSP) — 防止被注入的脚本执行"),l("li",null,"安全 Cookie 配置"),l("li",null,"禁止混合内容（Mixed Content） — 所有资源必须通过 HTTPS 加载"),l("li",null,"减少在客户端存储敏感信息")],-1)])]),_:1}),n[17]||(n[17]=l("p",null,[u("最重要是: "),l("strong",null,"安全的制度, 安全的管理")],-1)),n[18]||(n[18]=l("p",null,"如禁止把密码设置为: admin/123456 等",-1))])}const C=t(p,[["render",S]]);export{T as __pageData,C as default};
