import{_ as i,c as e,o as t,ah as s}from"./chunks/framework.fGi7qB65.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/base/nodejs.md","filePath":"knowledge/base/nodejs.md"}'),o={name:"knowledge/base/nodejs.md"};function a(r,l,n,p,c,d){return t(),e("div",null,[...l[0]||(l[0]=[s(`<h3 id="_1-node-中-require-时发生了什么" tabindex="-1">1.Node 中 require 时发生了什么? <a class="header-anchor" href="#_1-node-中-require-时发生了什么" aria-label="Permalink to “1.Node 中 require 时发生了什么?”">​</a></h3><p>路径解析 =&gt; 缓存检查 =&gt; 创建模块对象 =&gt; 读取与编译 =&gt; 执行模块代码 =&gt; 标记完成并返回</p><p>require() 缓存检查顺序：</p><ul><li><ol><li>检查原生模块缓存;</li></ol></li><li><ol start="2"><li>检查 require.cache（路径解析后的绝对路径作为 key）。</li></ol></li><li><ol start="3"><li>如果缓存未命中 → 走模块解析;</li></ol></li><li><ol start="4"><li>执行模块，填充 require.cache，返回 module.exports。</li></ol></li></ul><h3 id="_2-node-js-事件循环机制" tabindex="-1">2.Node.js 事件循环机制 <a class="header-anchor" href="#_2-node-js-事件循环机制" aria-label="Permalink to “2.Node.js 事件循环机制”">​</a></h3><p>六个阶段:</p><ol><li>Timers（计时器阶段）执行 setTimeout() 和 setInterval() 的回调</li><li>Pending callbacks（待定回调阶段）执行系统操作的回调，如 TCP 错误</li><li>Idle, prepare（闲置准备阶段）内部使用阶段</li><li>Poll（轮询阶段） - 最重要的阶段 检索新的 I/O 事件，执行 I/O 相关回调</li><li>Check（检查阶段）执行 setImmediate() 的回调</li><li>Close callbacks（关闭回调阶段）执行关闭事件的回调，如 socket.on(&#39;close&#39;, ...)</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>每个阶段的宏任务执行完 →</span></span>
<span class="line"><span>    执行所有 nextTick 回调 →</span></span>
<span class="line"><span>    执行所有微任务 (Promise)</span></span>
<span class="line"><span>→ 进入下一个阶段</span></span></code></pre></div><p>注意: 滥用 process.nextTick：会阻塞后续阶段（饿死循环）。</p><p><strong>优先级关系</strong><strong>process.nextTick() &gt; Promise.then() &gt; setTimeout() &gt; setImmediate()</strong></p><ul><li>Node 的事件循环由 libuv 实现，循环有 timers → pending → poll → check → close 等阶段。</li><li>微任务： process.nextTick（最高优先）→ Promise.then（微任务）。</li><li>setImmediate 与 setTimeout(0) 的先后取决于上下文（在 I/O 回调中 setImmediate 会优先）。</li><li>线程池 用于无法立即非阻塞完成的工作（默认线程数 ≈4，可通过 UV_THREADPOOL_SIZE 设置）。</li><li>不要阻塞 主线程，必要时用 worker_threads 或外部服务/进程。</li></ul><h3 id="_3-process-nexttick-与-settimeout-的区别" tabindex="-1">3.process.nextTick 与 setTimeout 的区别 <a class="header-anchor" href="#_3-process-nexttick-与-settimeout-的区别" aria-label="Permalink to “3.process.nextTick 与 setTimeout 的区别”">​</a></h3><ul><li>process.nextTick 在当前事件循环结束时执行</li><li>setTimeout(fn, 0) 在下一个事件循环开始时执行</li><li>nextTick 优先级更高</li></ul><h3 id="_4-koa-与-express-的区别" tabindex="-1">4.Koa 与 Express 的区别 <a class="header-anchor" href="#_4-koa-与-express-的区别" aria-label="Permalink to “4.Koa 与 Express 的区别”">​</a></h3><ol><li>中间件机制</li></ol><ul><li>Express：单向流动，中间件通过 next() 线性执行，一旦响应结束就不能修改</li><li>Koa：洋葱模型，中间件既可以处理请求也可以处理响应，支持统一的错误处理</li></ul><ol start="2"><li>异步处理</li></ol><ul><li>Express：基于回调函数，容易陷入回调地狱，异步错误处理相对复杂</li><li>Koa：基于 Promise 和 async/await，代码更简洁，异步流程控制更直观</li></ul><ol start="3"><li>上下文对象</li></ol><ul><li>Express：req 和 res 是分离的对象，功能相对分散</li><li>Koa：ctx 统一上下文，封装了 request 和 response，API 设计更简洁优雅</li></ul><ol start="4"><li>功能内置</li></ol><ul><li>Express：内置了很多中间件，功能齐全，开箱即用</li><li>Koa：核心功能精简，需要通过第三方中间件扩展，更加灵活</li></ul><ol start="5"><li>路由系统</li></ol><ul><li>Express：内置了强大的路由系统，支持链式调用</li><li>Koa：路由需要通过第三方中间件实现（如 koa-router）</li></ul><p>6.社区生态</p><ul><li>Express：历史更悠久，社区更成熟，资源更丰富</li><li>Koa：较新但发展迅速，设计更现代，适合新项目</li></ul><ol start="7"><li>错误处理</li></ol><ul><li>Express：通过特殊的错误处理中间件，需要手动传递错误</li><li>Koa：通过 try/catch 优雅地处理错误，统一的错误处理更方便</li></ul><ol start="8"><li>适用场景</li></ol><ul><li>Express：适合快速开发，现有项目迁移，团队熟悉度高</li><li>Koa：适合追求优雅代码，需要更好的异步流程控制的场景</li></ul><h3 id="_5-jwt-如何自动更新-token" tabindex="-1">5.JWT 如何自动更新 token <a class="header-anchor" href="#_5-jwt-如何自动更新-token" aria-label="Permalink to “5.JWT 如何自动更新 token”">​</a></h3><p>采用JWT 双 Token 模式：Access Token + Refresh Token</p><table tabindex="0"><thead><tr><th>类型</th><th>作用</th><th>有效期</th><th>存储位置</th></tr></thead><tbody><tr><td><strong>Access Token</strong></td><td>每次请求携带，用于认证用户身份</td><td>短（几分钟 ~ 几小时）</td><td>浏览器内存 / localStorage / cookie</td></tr><tr><td><strong>Refresh Token</strong></td><td>用于申请新的 Access Token</td><td>长（几天 ~ 几周）</td><td>安全 Cookie / HttpOnly 存储</td></tr></tbody></table><p>当前端收到 401 且检测到是 “Access Token 过期”时, 用Refresh Token 获取新的Access Token</p><p>前端思路:</p><ul><li>封装请求拦截器；</li><li>如果请求返回 401，且不是刷新请求；</li><li>尝试调用 /auth/refresh；</li><li>刷新成功 → 重试原请求；</li><li>刷新失败 → 跳转登录。</li></ul><ol><li><p>滑动过期（Sliding Expiration）</p><ul><li>每次用户请求时，如果 Access Token 快过期，自动签发新 Token(playload 可以加过期时间)</li></ul></li><li><p>令牌版本号机制</p><ul><li>每个用户在数据库中维护一个 tokenVersion；当刷新或登出时，更新版本号；旧的 Refresh Token 因版本号不匹配立即失效。</li></ul></li><li><p>JWT 自动续期时的“并发刷新冲突问题”</p><ul><li>同一时间只允许一次刷新操作,其他请求等待刷新完成后再继续。 <ul><li>请求队列 + 刷新锁</li><li>当第一个请求检测到 token 过期时： <ul><li>标记一个全局变量 isRefreshing = true</li><li>发起 /auth/refresh 请求</li><li>其他同时失败的请求 不要立即刷新，而是放进一个队列 pendingRequests</li></ul></li><li>刷新成功后： <ul><li>更新新的 token；</li><li>依次重放（retry）队列中的请求；</li><li>清空队列；</li><li>重置 isRefreshing = false。</li></ul></li></ul></li><li>刷新令牌幂等化 <ul><li>若在短时间内多次使用同一个 refresh token,后端可以检测并返回同一个新 token（或最新有效 token），而不是直接报错“refresh token 已被使用”。</li></ul></li><li>刷新限流 <ul><li>对同一个用户的刷新操作设置时间间隔限制（例如 5 秒内只允许一次刷新）</li></ul></li></ul></li></ol><h3 id="_6-扫描登录如何实现" tabindex="-1">6.扫描登录如何实现? <a class="header-anchor" href="#_6-扫描登录如何实现" aria-label="Permalink to “6.扫描登录如何实现?”">​</a></h3><p>PC浏览器 &lt;———&gt; 服务器 &lt;———&gt; 手机App</p><ul><li><p>浏览器打开登录页</p><ul><li>前端请求后端生成一个 唯一的登录二维码</li><li>二维码内容通常是一个 临时 login_token（或UUID）</li><li>二维码展示给用户</li></ul></li><li><p>用户用手机App扫码</p><ul><li>App 扫描二维码，得到 login_token</li><li>App 发请求到服务器，验证该二维码是否合法</li><li>如果合法，App 显示提示「是否允许登录该网页？」</li></ul></li><li><p>用户在手机上点击「确认登录」</p><ul><li>App 带着登录状态的用户信息，调用后端接口</li><li>服务端保存：该 login_token 对应的登录状态</li></ul></li><li><p>网页端轮询或WebSocket等待登录结果</p><ul><li>网页端每隔1-2秒查询登录结果</li><li>如果发现 login_token 已被确认绑定用户，则返回成功状态 + 用户信息</li></ul></li><li><p>浏览器登录成功</p><ul><li>前端拿到 token（如JWT），存入 Cookie / LocalStorage</li><li>重定向到首页，登录完成</li></ul></li></ul><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to “其他”">​</a></h3><ul><li><strong>eggjs 默认worker 和cpu核心数相同, 如果是物理机器,可能需要指定worker 数</strong></li><li>登录后页面多次自动重复刷新后,才正常进去, a 服务颁发的token, b 服务短时间后才正常认证,可能是2个机器时间不一致,差几秒或者几十秒</li></ul>`,42)])])}const k=i(o,[["render",a]]);export{h as __pageData,k as default};
