import{_ as t,c as i,o as a,ah as o}from"./chunks/framework.Ambqe2Ac.js";const m=JSON.parse('{"title":"开放性问题, 场景性问题","description":"","frontmatter":{},"headers":[],"relativePath":"interview/index.md","filePath":"interview/index.md"}'),r={name:"interview/index.md"};function p(n,e,l,s,_,d){return a(),i("div",null,[...e[0]||(e[0]=[o('<h1 id="开放性问题-场景性问题" tabindex="-1">开放性问题, 场景性问题 <a class="header-anchor" href="#开放性问题-场景性问题" aria-label="Permalink to “开放性问题, 场景性问题”">​</a></h1><ol><li><p>如何设计一个UI组件库? 架构 → 技术选型 → 组件设计 → 工程化 → 发布维护 架构选型: 组件模型, 样式方案, 构建工具, 语言 设计原则: 颗粒度, 可配置性, 主题化 &amp; 样式扩展, 无障碍, 国际化 工程化: 按需加载 文档与演示 测试 ci/cd 发布 开放流程: 定义 API（props、事件、样式接口）=&gt; 设计交互（考虑鼠标、触屏、键盘）=&gt; 实现逻辑（React Hooks / Vue Composition API）=&gt; 写测试用例（props、边界情况、交互）=&gt; 写文档 + Demo（Storybook / VitePress）=&gt; 布版本 (语义化版本管理)</p></li><li><p>前端架构设计 模块化, 状态管理, 组件设计, 代码分割, 协作策略</p></li><li><p>前端性能监控与优化 前端埋点 + 异常日志上报(Sentry 自研)</p></li><li><p>前端国际化与可扩展性</p></li><li><p>设计一个拖拉拽的低平台要注意什么</p></li><li><p>作为前端 TL 如何管理团队 技术把关人,团队赋能者,项目推动者 技术管理: 制定规范,把控架构,代码评审,技术沉淀 人员管理: 任务拆解,人尽其才,成长规划 项目管理: 明确目标,可视化进度,风险预警,跨团队沟通</p></li></ol>',2)])])}const f=t(r,[["render",p]]);export{m as __pageData,f as default};
